<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation=" 
	http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	metadata-complete="true">

	<display-name>mixtape-webapp</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- Logging listener -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>

	<!-- Request that Jetty creates an MBean to manage the Bayeux instance -->
	<!-- <context-param> <param-name>org.eclipse.jetty.server.context.ManagedAttributes</param-name> 
		<param-value>org.cometd.bayeux</param-value> </context-param> -->

	<!-- The definition of the Root Spring Container shared by all Servlets 
		and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	<!-- <context-param> <param-name>contextConfigLocation</param-name> <param-value>/WEB-INF/cometd-servlet.xml</param-value> 
		</context-param> -->

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- appServlet must be loaded after atmosphere servlet so this value must 
			be higher. -->
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Atmosphere for processing push notifications -->
	<servlet>
		<description>AtmosphereServlet</description>
		<servlet-name>AtmosphereServlet</servlet-name>
		<servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterLifeCyclePolicy</param-name>
			<param-value>EMPTY_DESTROY</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.shareableThreadPool</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.recoverFromDestroyedBroadcaster</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.websocket.messageContentType</param-name>
			<param-value>application/json</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcastFilterClasses</param-name>
			<param-value>org.atmosphere.client.TrackMessageSizeFilter</param-value>
		</init-param>
		<!-- Uncomment to use Redis <init-param> <param-name>org.atmosphere.cpr.broadcasterClassName</param-name> 
			<param-value>org.atmosphere.plugin.org.atmosphere.plugin.redis.RedisBroadcaster</param-value> 
			</init-param> -->
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>AtmosphereServlet</servlet-name>
		<url-pattern>/atmosphere/*</url-pattern>
	</servlet-mapping>

	<!-- Process Push Notifications -->
	<!-- <servlet> <servlet-name>cometd</servlet-name> <servlet-class>org.cometd.server.CometdServlet</servlet-class> 
		<load-on-startup>1</load-on-startup> <async-supported>true</async-supported> 
		</servlet> <servlet-mapping> <servlet-name>cometd</servlet-name> <url-pattern>/cometd/*</url-pattern> 
		</servlet-mapping> -->

</web-app>